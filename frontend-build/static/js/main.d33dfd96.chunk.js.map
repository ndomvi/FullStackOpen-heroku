{"version":3,"sources":["services/phonebook.js","App.js","index.js"],"names":["url","axios","get","then","response","data","person","post","id","delete","put","NewPersonForm","newName","newNumber","addPerson","handleNameInputChange","handleNumberInputChange","onSubmit","onChange","value","type","disabled","FilterField","filterQuery","handleFilterQueryChange","PhonebookList","list","phonebook","removePerson","filter","name","toLowerCase","startsWith","map","key","style","margin","number","onClick","Notification","notification","text","className","error","App","useState","setPhonebook","setNewName","setNewNumber","setFilterQuery","notificationMessage","setNotificationMessage","useEffect","phonebookService","showNotification","duration","setTimeout","updatePerson","updatedPerson","returnedPerson","catch","event","preventDefault","duplicatePerson","find","window","confirm","addedPerson","concat","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d33dfd96.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst url = '/api/persons'\r\n\r\nconst getPhonebook = () => axios.get(url).then(response => response.data)\r\nconst addPerson = person => axios.post(url, person).then(response => response.data)\r\nconst removePerson = id => axios.delete(`${url}/${id}`)\r\nconst updatePerson = person => axios.put(`${url}/${person.id}`, person).then(response => response.data)\r\n\r\n// Exports are the same, either can be used\r\nexport default { getPhonebook: getPhonebook, addPerson, removePerson, updatePerson }\r\n","import React, { useEffect, useState } from 'react'\nimport phonebookService from './services/phonebook'\n\nconst NewPersonForm = ({ newName, newNumber, addPerson, handleNameInputChange, handleNumberInputChange }) => (\n  <form onSubmit={addPerson}>\n    <div>\n      name: <input onChange={handleNameInputChange} value={newName} />\n    </div>\n    <div>\n      number: <input onChange={handleNumberInputChange} value={newNumber} />\n    </div>\n    <div>\n      <button type='submit' disabled={!(newName && newNumber) /* fields are not empty */}>\n        add\n      </button>\n    </div>\n  </form>\n)\n\nconst FilterField = ({ filterQuery, handleFilterQueryChange }) => (\n  <div>\n    filter names starting with: <input onChange={handleFilterQueryChange} value={filterQuery} />\n  </div>\n)\n\nconst PhonebookList = ({ phonebook, filterQuery, removePerson }) => {\n  const filteredList = list => list.filter(person => person.name.toLowerCase().startsWith(filterQuery.toLowerCase()))\n\n  return (\n    <ul>\n      {filteredList(phonebook).map(person => (\n        <li key={person.id} style={{ margin: '5px' }}>\n          {person.name} {person.number}\n          <button onClick={() => removePerson(person.id)}>Remove</button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nconst Notification = ({ notification }) => {\n  // if (!message) return null\n  // return <div className='error'>{message}</div>\n  return !(notification && notification.text) ? null : (\n    <div className={notification.error ? 'error' : 'success'}>{notification.text}</div>\n  )\n}\n\nconst App = () => {\n  const [phonebook, setPhonebook] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filterQuery, setFilterQuery] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState({}) // { text, error }\n\n  // Fetch and set phonebook from server\n  const fetchPhonebook = () => {\n    phonebookService.getPhonebook().then(phonebook => setPhonebook(phonebook))\n  }\n  useEffect(fetchPhonebook, [])\n\n  const showNotification = (text, error = false, duration = 4500) => {\n    setNotificationMessage({ text, error })\n    setTimeout(() => {\n      setNotificationMessage(null)\n    }, duration)\n  }\n\n  const addPerson = event => {\n    event.preventDefault()\n\n    const duplicatePerson = phonebook.find(person => person.name === newName)\n    if (duplicatePerson) {\n      window.confirm(`${newName} is already in the phonebook!\\nUpdate the number?`) &&\n        updatePerson({ ...duplicatePerson, number: newNumber })\n    } else {\n      const newPerson = { name: newName, number: newNumber }\n      phonebookService.addPerson(newPerson).then(addedPerson => {\n        showNotification(`${addedPerson.name} was added to the phonebook!`)\n\n        setPhonebook(phonebook.concat(addedPerson))\n        setNewName('')\n        setNewNumber('')\n      })\n    }\n  }\n\n  const removePerson = id => {\n    phonebookService.removePerson(id).catch(() => {})\n    setPhonebook(phonebook.filter(person => person.id !== id))\n  }\n\n  const updatePerson = updatedPerson => {\n    phonebookService\n      .updatePerson(updatedPerson)\n      .then(returnedPerson => {\n        showNotification(`${returnedPerson.name} was updated!`)\n\n        // Update the returned person in the list\n        setPhonebook(phonebook.map(person => (person.id !== updatedPerson.id ? person : returnedPerson)))\n      })\n      .catch(() => {\n        showNotification(`${updatedPerson.name} has been removed from the server`, true)\n        setPhonebook(phonebook.filter(person => person.id !== updatedPerson.id))\n      })\n  }\n\n  const handleNameInputChange = event => setNewName(event.target.value)\n  const handleNumberInputChange = event => setNewNumber(event.target.value)\n  const handleFilterQueryChange = event => setFilterQuery(event.target.value)\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification notification={notificationMessage} />\n      <h2>Add a new person!</h2>\n      <NewPersonForm\n        newName={newName}\n        newNumber={newNumber}\n        addPerson={addPerson}\n        handleNameInputChange={handleNameInputChange}\n        handleNumberInputChange={handleNumberInputChange}\n      />\n      <h2>Numbers</h2>\n      <FilterField filterQuery={filterQuery} handleFilterQueryChange={handleFilterQueryChange} />\n      <PhonebookList phonebook={phonebook} filterQuery={filterQuery} removePerson={removePerson} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}